# Make IDF_HOME available to the sim at run time
export IDF_HOME := $(abspath $(dir $(lastword $(MAKEFILE_LIST)))/../../..)
TRICK_GTE_EXT += IDF_HOME

# Header, SimObject, and Python module paths
EXTERNALS         := externals/idf
THIRD_PARTY       := $(IDF_HOME)/3rdParty/trick
INCLUDE           := $(IDF_HOME)/include
TRICK_CFLAGS      += -I$(INCLUDE)
TRICK_CXXFLAGS    += -I$(INCLUDE)
TRICK_SFLAGS      += -I$(THIRD_PARTY)/sim_objects
TRICK_PYTHON_PATH += :$(EXTERNALS)/3rdParty/trick/python:$(THIRD_PARTY)/python

# Links to be built by build_externals
LINKS := $(EXTERNALS)/apps/vhc/build $(EXTERNALS)/3rdParty/trick/python

# Libraries
ifeq ($(TRICK_HOST_TYPE), Linux)
    TRICK_USER_LINK_LIBS += -ludev -lrt
else ifeq ($(TRICK_HOST_TYPE), Darwin)
    TRICK_USER_LINK_LIBS += -framework IOKit -framework CoreFoundation
endif

# Enable library support if Trick >= 17.1
ifneq ($(wildcard $(TRICK_HOME)/share/trick/makefiles/trickify.mk),)

    # Additional links to be built by build_externals
    LINKS += $(EXTERNALS)/3rdParty/trick/lib/python

    # Tell SWIG where to find *.i files
    SWIG_FLAGS += -I$(THIRD_PARTY)/lib

    # Tell Trick to expect io_* and py_* code for these headers, but not to generate it itself.
    # This is different than ICG_EXCLUDE, which would cause Trick to ignore the io_* and py_* code.
    TRICK_EXT_LIB_DIRS += :$(INCLUDE)

    # Tell Trick where to find the Python modules generated by SWIG
    TRICK_PYTHON_PATH += :$(EXTERNALS)/3rdParty/trick/lib/python:$(THIRD_PARTY)/lib/python

    # Link in the libraries. We must use -whole-archive to ensure that io_* and py_* code not
    # needed at link time is nevertheless available at run time.
    ifeq ($(TRICK_HOST_TYPE), Linux)
        $(S_MAIN): TRICK_USER_LINK_LIBS += -Wl,-whole-archive $(THIRD_PARTY)/lib/libidf_trick.a -Wl,-no-whole-archive
    else ifeq ($(TRICK_HOST_TYPE), Darwin)
        $(S_MAIN): TRICK_USER_LINK_LIBS += -Wl,-force_load $(THIRD_PARTY)/lib/libidf_trick.a
    endif
    $(S_MAIN): TRICK_USER_LINK_LIBS += $(IDF_HOME)/build/lib/libidf.a

    # Append prerequisites to the $(S_MAIN) target, causing the libraries to be built along with the sim
    $(S_MAIN): libidf libidf_trick
else
    # Trick will be building all of IDF, so we need to add the path for use with LIBRARY_DEPENDENCY
    SOURCE := $(IDF_HOME)/source
    TRICK_CFLAGS   += -I$(SOURCE)
    TRICK_CXXFLAGS += -I$(SOURCE)
endif

# Include libntcan, if available
ifdef NTCAN_HOME
    TRICK_CFLAGS         += -I$(NTCAN_HOME) -DIDF_CAN
    TRICK_CXXFLAGS       += -I$(NTCAN_HOME) -DIDF_CAN
    TRICK_USER_LINK_LIBS += -L$(NTCAN_HOME) -lntcan
endif

libidf:
	@$(MAKE) -s -C $(IDF_HOME)

libidf_trick:
	@$(MAKE) -s -C $(THIRD_PARTY)/lib

build_externals: $(LINKS)

$(dir $(LINKS)):
	@mkdir -p $@

clean: clean_idf

clean_idf:
	@rm -rf externals/idf

.SECONDEXPANSION:

$(LINKS): $(EXTERNALS)% : $(IDF_HOME)% | $$(dir $$@)
	@ln -s $< $@
